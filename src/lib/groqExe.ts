// src/lib/groqExe.ts

import Groq from 'groq-sdk';

// --- SDK Type Imports ---
import {
    ChatCompletionCreateParamsNonStreaming,
    ChatCompletionCreateParamsStreaming,
    ChatCompletionCreateParamsBase,
    ChatCompletionMessageParam,
    ChatCompletion
} from 'groq-sdk/resources/chat/completions';

// --- Appwrite Type Imports ---
import { UserProfile } from './appwrite'; // Adjust path if necessary

// --- Constants for Type Validation ---

/** Valid exercise intensity levels. */
export const VALID_EXERCISE_INTENSITIES = ["Gentle", "Light", "Moderate"] as const;
/** Union type representing allowed exercise intensities. */
export type ExerciseIntensity = typeof VALID_EXERCISE_INTENSITIES[number];

// --- Interface Definitions ---

/**
 * Represents a single exercise suggestion generated by the AI.
 */
export interface ExerciseSuggestion {
  /** Unique identifier (can be generated client-side or by AI if prompted) */
  id: string;
  /** Name of the exercise */
  name: string;
  /** How to perform it or its benefits (Markdown possible) */
  description: string;
  /** Intensity level (e.g., "Gentle", "Light") */
  intensity: ExerciseIntensity | string; // Allows string fallback
  /** Suggested duration or repetitions (e.g., "10-15 minutes", "3 sets of 10 reps") */
  durationReps?: string;
  /** Primary benefit area (e.g., "Back Pain Relief", "Pelvic Floor", "Circulation") */
  focusArea?: string;
  /** **Crucial** safety precautions or contraindications */
  safetyNotes: string;
  /** AI's explanation for why this suggestion is relevant */
  reasoning?: string;
}

/** Structure for the AI's response, specialized for exercises */
export interface PersonalizedExerciseContent {
  /** Array of generated exercise suggestions */
  exercises: ExerciseSuggestion[];
}

/** Options to customize the exercise generation request */
export interface ExerciseGenerationOptions {
  /** Approximate number of exercise suggestions desired. Defaults to 3. */
  count?: number;
  /** A specific user request, focus area, or limitation to guide the AI. */
  customPreference?: string;
}

// --- Internal Types ---
/** Local union type for Groq Chat Completion Create parameters */
type ChatCompletionCreateParams = ChatCompletionCreateParamsNonStreaming | ChatCompletionCreateParamsStreaming;

// --- Configuration ---
/** Groq API Key loaded from environment variables. */
const API_KEY: string | undefined = import.meta.env.VITE_PUBLIC_GROQ_API_KEY;
/** Specifies the Groq AI model to use for generation. */
const MODEL_NAME: ChatCompletionCreateParamsBase['model'] = "llama3-70b-8192";

// Validate API Key presence
if (!API_KEY) {
    // In a production environment, you might throw an Error here
    // to prevent the application module from loading incorrectly.
    // throw new Error("Groq API Key is missing. Cannot initialize groqExeService.");
    console.error("CRITICAL ERROR: VITE_PUBLIC_GROQ_API_KEY is missing. Exercise generation will be unavailable.");
}

/** Initialized Groq SDK client instance, or null if API key is missing. */
const groq: Groq | null = API_KEY ? new Groq({ apiKey: API_KEY, dangerouslyAllowBrowser: true }) : null;

/** Configuration settings for the AI generation process. */
const generationConfig = {
    temperature: 0.7,
    max_tokens: 4096, // Sufficient for detailed JSON output
    top_p: 0.9,
};

// --- Helper Functions ---

/**
 * Helper to get basic trimester info based on weeks pregnant.
 * @param weeks - Weeks pregnant (number or string). Can be undefined/null/NaN.
 * @returns A descriptive string about the trimester or status.
 */
const getTrimesterInfo = (weeks: number | string | undefined | null): string => {
    const numWeeks = parseInt(String(weeks), 10); // Attempt to parse whatever is given
    if (isNaN(numWeeks) || numWeeks < 1) return "Pregnancy stage unknown"; // Handle invalid or zero weeks
    if (numWeeks <= 13) return "First trimester";
    if (numWeeks <= 27) return "Second trimester";
    if (numWeeks <= 42) return "Third trimester"; // Allow slightly beyond 40
    return "Post-term or invalid weeks"; // Handle cases beyond typical range
};

/**
 * Creates the detailed prompt for the Groq API based on user profile and options,
 * focused solely on generating exercise suggestions. Includes context, safety guidelines,
 * role definition, and strict JSON output format instructions.
 *
 * @param profile - The user's profile data from Appwrite.
 * @param options - Options to customize the request (count, custom preference).
 * @returns The formatted prompt string ready for the API call.
 */
const createExercisePersonalizationPrompt = (profile: UserProfile, options: ExerciseGenerationOptions = {}): string => {
    // Destructure options with defaults
    const { count = 3, customPreference } = options;

    // Safely extract profile data with fallbacks
    const weeks = profile.weeksPregnant ?? 'unknown';
    const activity = profile.activityLevel ?? 'unspecified';
    const conditions = profile.preExistingConditions?.trim() || 'none specified';
    // Dietary preferences are less relevant for exercise, but can be included for context if desired
    // const diet = profile.dietaryPreferences?.length ? profile.dietaryPreferences.join(', ') : 'none specified';

    // Build context string
    let context = `**User Context:**\n`;
    context += `- Pregnancy Stage: ${weeks} weeks (Implications: ${getTrimesterInfo(weeks)})\n`;
    context += `- Stated Activity Level: ${activity}\n`;
    // context += `- Stated Dietary Preferences: ${diet}\n`; // Optional: include if it might influence energy levels/exercise choice
    if (conditions !== 'none specified') {
        context += `- Stated Pre-existing Conditions: ${conditions} (Acknowledge for context only, DO NOT give medical advice related to these, but consider for exercise safety e.g., suggest lower impact if joint pain mentioned)\n`;
    }
    if (customPreference?.trim()) {
        context += `- User's Current Exercise Request/Focus: "${customPreference.trim()}"\n`;
    }
    // Add guidance for minimal context
    if (weeks === 'unknown' && activity === 'unspecified' && conditions === 'none specified') {
        context += `- Note: User profile context is minimal. Provide generally safe and helpful pregnancy exercise suggestions (Gentle/Light intensity).\n`;
    }

    // Define safety instructions and AI role for Exercises
    const safetyInstructions = `
**Safety & Role Definition:**
- You are MomCare AI, an informational assistant providing general exercise suggestions. You are **NOT** a medical professional, doctor, certified personal trainer, or physical therapist. Your advice is not a substitute for professional consultation.
- **ALL exercise suggestions are purely informational and MUST NOT be taken as medical or professional advice.**
- **CRITICAL (Exercise Safety):** For **every** exercise suggestion, the "safetyNotes" field **MUST** clearly state: "Consult your doctor before starting any new exercise during pregnancy. Listen to your body and stop immediately if you feel pain, dizziness, shortness of breath, or discomfort." Add any specific precautions relevant to the exercise itself (e.g., "Avoid lying flat on your back in later trimesters for prolonged periods", "Ensure good balance to prevent falls", "Modify range of motion as needed").
- Base suggestions on general, evidence-based knowledge about safe exercise during pregnancy (e.g., focus on low-impact activities like walking, swimming, prenatal yoga; avoiding contact sports, activities with high fall risk, overheating; adapting intensity based on trimester and previous activity level).
- Ensure suggested intensity aligns with the VALID_EXERCISE_INTENSITIES: ${VALID_EXERCISE_INTENSITIES.join(', ')} and is appropriate for the user's context (default to Gentle/Light if unsure).
- **DO NOT** suggest exercises that are generally contraindicated in pregnancy (e.g., heavy weightlifting with Valsalva maneuver, contact sports, exercises lying flat on the back for extended periods in later pregnancy).
- **DO NOT** attempt to diagnose, treat, or manage any medical conditions mentioned in the profile. Acknowledge conditions only to tailor general suggestions appropriately (e.g., suggest lower-impact exercise if joint pain is mentioned, avoid specific movements if a condition warrants it based on general knowledge, but always defer to professional advice).
`;

    // Define strict JSON output format for exercises only
    const outputFormatInstructions = `
**Output Format Instructions:**
Provide the response STRICTLY as a valid JSON object. NO extra text, greetings, or explanations outside the JSON structure.
The top-level JSON object MUST ONLY have a single key: "exercises". The value of "exercises" MUST be an array of Exercise Suggestion objects.

Generate approximately ${count} valid exercise suggestions relevant to the provided user context and custom request (if any).

**Exercise Suggestion Object Structure (within "exercises" array):**
- "id": (string) A unique identifier (you can generate one like "ex-1", "ex-2").
- "name": (string) Clear name of the exercise.
- "description": (string) 1-3 sentences explaining how to perform it or its benefits. Use Markdown.
- "intensity": (string) Must be one of: ${VALID_EXERCISE_INTENSITIES.join(', ')}.
- "durationReps": (string, optional) e.g., "15-20 minutes", "3 sets of 12 reps".
- "focusArea": (string, optional) e.g., "Pelvic Floor", "Back Strength", "Circulation".
- "safetyNotes": (string) **MANDATORY.** Must include the general consultation reminder AND specific precautions for the exercise.
- "reasoning": (string, optional) Max 20 words on why this suggestion is relevant (e.g., "Low-impact cardio suitable for most trimesters").

**Example Exercise Object:**
{
  "id": "ex-1",
  "name": "Pelvic Tilts (Cat-Cow Stretch)",
  "description": "Start on your hands and knees. As you inhale, drop your belly towards the floor and look up slightly (Cow). As you exhale, round your spine towards the ceiling, tucking your chin (Cat). Helps relieve back discomfort and promotes spinal mobility.",
  "intensity": "Gentle",
  "durationReps": "Repeat 10-15 times",
  "focusArea": "Back Pain Relief, Pelvic Mobility",
  "safetyNotes": "Consult your doctor before starting any new exercise during pregnancy. Listen to your body and stop immediately if you feel pain, dizziness, shortness of breath, or discomfort. Move gently and avoid over-arching your back. If you have wrist pain, you can perform this leaning against a wall.",
  "reasoning": "Gentle movement to ease back tension common in pregnancy."
}

**CRITICAL Rules:**
- **Output ONLY the JSON object string.** No introductory text, concluding remarks, or markdown formatting outside the JSON string values.
- Adhere STRICTLY to the requested JSON structure with only the "exercises" key containing an array of Exercise Suggestion objects.
- Ensure valid JSON syntax: double quotes for all keys and string values, correct comma placement, valid arrays.
- Ensure all mandatory fields (like 'id', 'name', 'description', 'intensity', 'safetyNotes') within each exercise object are present and non-empty.
`;

    // Assemble the final prompt
    return `
You are MomCare AI, an informational assistant for pregnant users. Provide supportive, safe, general exercise suggestions based on the user's profile while strictly adhering to safety guidelines and the required JSON output format.

${context}
${safetyInstructions}
Generate personalized, pregnancy-safe exercise suggestions based *specifically* on the user's context. Ensure all fields in the Exercise Suggestion Object Structure are included. Adhere precisely to the output format instructions below.
${outputFormatInstructions}
`;
};


/**
 * Parses and validates the AI's JSON response for exercise suggestions.
 * Filters out invalid exercise items within the array but preserves valid ones.
 *
 * @param responseText - Raw API response text.
 * @returns Validated PersonalizedExerciseContent object.
 * @throws Error if JSON is invalid or missing the required top-level "exercises" key.
 */
const parseAndValidateExerciseContent = (responseText: string): PersonalizedExerciseContent => {
    let cleanedJsonString = responseText.trim();
    const jsonStartIndex = cleanedJsonString.indexOf('{');
    const jsonEndIndex = cleanedJsonString.lastIndexOf('}');

    if (jsonStartIndex === -1 || jsonEndIndex === -1 || jsonEndIndex < jsonStartIndex) {
        throw new Error("AI response did not contain a recognizable JSON object.");
    }
    cleanedJsonString = cleanedJsonString.substring(jsonStartIndex, jsonEndIndex + 1);

    let parsedData: unknown;
    try {
        parsedData = JSON.parse(cleanedJsonString);
    } catch (parseError: unknown) {
        throw new Error(`Failed to parse AI suggestions. Invalid JSON format. ${parseError instanceof Error ? `Details: ${parseError.message}` : ''}`);
    }

    if (typeof parsedData !== 'object' || parsedData === null) {
        throw new Error("Validation Error: AI response is not a JSON object.");
    }

    const potentialContent = parsedData as Record<string, unknown>;
    const validatedOutput: PersonalizedExerciseContent = { exercises: [] };

    // --- Validate Exercises ---
    if (!potentialContent.hasOwnProperty('exercises') || !Array.isArray(potentialContent.exercises)) {
        throw new Error("Validation Error: AI response missing required 'exercises' array.");
    }

    // Process exercises
    validatedOutput.exercises = potentialContent.exercises
        .map((item: unknown, index: number): ExerciseSuggestion | null => {
            if (typeof item !== 'object' || item === null) { return null; }
            const ex = item as Record<string, unknown>;

            // Required fields check
            if (typeof ex.id !== 'string' || !ex.id.trim()) { return null; } // Added ID check
            if (typeof ex.name !== 'string' || !ex.name.trim()) { return null; }
            if (typeof ex.description !== 'string' || !ex.description.trim()) { return null; }
            if (typeof ex.intensity !== 'string' || !ex.intensity.trim()) { return null; }
            if (typeof ex.safetyNotes !== 'string' || !ex.safetyNotes.trim()) { return null; } // Mandatory

            // Optional Fields Validation & Cleaning
            const durationReps = (typeof ex.durationReps === 'string' && ex.durationReps.trim()) ? ex.durationReps.trim() : undefined;
            const focusArea = (typeof ex.focusArea === 'string' && ex.focusArea.trim()) ? ex.focusArea.trim() : undefined;
            const reasoning = (typeof ex.reasoning === 'string' && ex.reasoning.trim()) ? ex.reasoning.trim() : undefined;

            // Validate intensity against allowed values, default to Gentle if invalid
            const finalIntensity = VALID_EXERCISE_INTENSITIES.includes(ex.intensity as ExerciseIntensity) ? ex.intensity : "Gentle";

            // Re-assign a client-side ID for robustness if needed, or trust AI's ID if validated
            const finalId = ex.id.trim(); // Use the validated ID from AI

            return {
                id: finalId,
                name: ex.name.trim(),
                description: ex.description.trim(),
                intensity: finalIntensity,
                durationReps,
                focusArea,
                safetyNotes: ex.safetyNotes.trim(),
                reasoning,
            };
        })
        .filter((item): item is ExerciseSuggestion => item !== null);

     if (validatedOutput.exercises.length === 0 && potentialContent.exercises.length > 0) {
       // No valid items found, though the array existed.
       console.warn("Validation Warning: AI 'exercises' array contained items, but none passed validation.");
    }

    return validatedOutput;
};


// --- Public API Function ---

/**
 * Fetches personalized exercise suggestions from Groq.
 * Handles API communication, response processing, and validation.
 * Matches the function name expected by the frontend code.
 *
 * @async
 * @param {UserProfile} profile - The user's profile data.
 * @param {ExerciseGenerationOptions} [options={}] - Options to customize the exercise request.
 * @returns {Promise<PersonalizedExerciseContent>} A Promise resolving to validated exercise suggestions.
 * @throws {Error} If service unavailable, API call fails, or validation fails critically.
 */
export const generateExerciseSuggestions = async (
    profile: UserProfile,
    options: ExerciseGenerationOptions = {}
): Promise<PersonalizedExerciseContent> => {
    if (!groq) {
        throw new Error("Exercise suggestion service unavailable (Groq client not initialized). Check API Key.");
    }

    const prompt = createExercisePersonalizationPrompt(profile, options);
    const messages: ChatCompletionMessageParam[] = [{ role: 'user', content: prompt }];
    const params: ChatCompletionCreateParams = {
        messages, model: MODEL_NAME, temperature: generationConfig.temperature,
        max_tokens: generationConfig.max_tokens, top_p: generationConfig.top_p, stream: false,
        // Ensure JSON mode if the model supports it, otherwise rely on prompt instructions
        // response_format: { type: "json_object" }, // Uncomment if using a model version that explicitly supports this
    };

    try {
        const chatCompletion: ChatCompletion = await groq.chat.completions.create(params);

        const choice = chatCompletion.choices?.[0];
        const responseText = choice?.message?.content;
        const finishReason = choice?.finish_reason;

        if (finishReason !== 'stop' && finishReason !== 'length') {
            if (typeof finishReason === 'string' && finishReason.toLowerCase().includes('filter')) {
                throw new Error(`AI generation blocked for safety/content reasons (${finishReason}).`);
            }
            throw new Error(`AI generation stopped unexpectedly (Reason: ${finishReason || 'unknown'}).`);
        }

        if (!responseText && finishReason !== 'stop') {
             if (finishReason === 'length') { console.warn("AI response content empty/null, reason 'length'. Attempting parse (may fail)."); }
             else { throw new Error(`AI returned unexpected empty content (Reason: ${finishReason}).`); }
        }

        if (responseText === "" && finishReason === 'stop') {
             console.warn("AI returned empty string response. Returning empty suggestions.");
             return { exercises: [] };
        }

        if (finishReason === 'length') { console.warn("AI response may be truncated. JSON/Suggestions might be incomplete."); }

        if (responseText === null || responseText === undefined) {
             throw new Error("AI response content was unexpectedly null or undefined.");
        }

        return parseAndValidateExerciseContent(responseText);

    } catch (error: unknown) {
        console.error(`Error during Groq exercise personalization fetch/parse:`, error);
        if (error instanceof Groq.APIError) {
            const status = error.status ?? 'N/A';
            const message = error.message || 'Unknown API error.';
            throw new Error(`Exercise personalization service API error (Status: ${status}): ${message}`);
        } else if (error instanceof Error) {
            // Re-throw validation errors or other specific errors
            throw error;
        } else {
            throw new Error("An unexpected error occurred while fetching personalized exercise content.");
        }
    }
};

// --- Service Object Export ---
// Exporting with the function name expected by the frontend code
export const groqExeService = {
    generateExerciseSuggestions,
};

// --- Type alias for frontend compatibility if needed ---
// This matches the type name used in the MealPage import
export type GenerationOptions = ExerciseGenerationOptions;